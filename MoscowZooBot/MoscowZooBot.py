import datetime
import telebot
from telebot import types
import os
import vk_api
from vk_api import VkUpload
import smtplib
from datetime import datetime
import sqlite3
from email.message import EmailMessage
from config import (dict_questions, dict_date_of_birth, TOKEN, TOKEN_VK, about_prog, intro_zoroastri,
                    quize_result, intro, dict_zoroastri, passw_external_app, from_email)


bot = telebot.TeleBot(TOKEN)
user_data = {}
check = 0  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
photo_path = ''
caption = ''
result_quiz: int = 0 # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º  —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã

@bot.message_handler(commands=['start', 'help'])
def start(message: telebot.types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    first_name = message.chat.first_name

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard = types.KeyboardButton(text='‚ùì–í–∏–∫—Ç–æ—Ä–∏–Ω–∞')
    keyboard1 = types.KeyboardButton(text='üóìÔ∏è –ü–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è')
    keyboard2 = types.KeyboardButton(text='üìí –ü–æ –≥–æ–¥—É —Ä–æ–∂–¥–µ–Ω–∏—è')
    keyboard3 = types.KeyboardButton(text='–ü—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–í–æ–∑—å–º–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–¥ –æ–ø–µ–∫—É¬ª')
    markup.add(keyboard)
    markup.add(keyboard1)
    markup.add(keyboard2)
    markup.add(keyboard3)

    path = f'{os.getcwd()}\logo.gif'
    file_logo = open(path, 'rb')
    if check == 0:
        analytics_bot(flag=0)
        choice_database(user_id, message=message)
        bot.send_video(message.chat.id, file_logo, None, 'Text')
        text = (f'‚úã –ü—Ä–∏–≤–µ—Ç *{first_name}*! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç! \n\n{intro}')
    else:
        text = ('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá')
    bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=markup)

@bot.message_handler(commands=['stop'])
def stop(message): #–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /stop
    global check
    bot.send_message(message.chat.id,'üìµ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
                     reply_markup=types.ReplyKeyboardRemove())
    check = 0


@bot.message_handler(content_types=['text'])
def quize(message: telebot.types.Message):
    chat_id = message.chat.id
    global check
    if message.text == '‚ùì–í–∏–∫—Ç–æ—Ä–∏–Ω–∞':
        analytics_bot(flag=0) # –°—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π. –ü–ª—é—Å—É–µ–º 1 –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—É –≤ –±–∞–∑–µ.
        already_passed(chat_id)

    elif message.text == 'üìí –ü–æ –≥–æ–¥—É —Ä–æ–∂–¥–µ–Ω–∏—è':
        msg = bot.send_message(message.chat.id, f'{intro_zoroastri}\n\n–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è \n\n\
üëâ *–ù–∞–ø—Ä–∏–º–µ—Ä: 1978*', parse_mode='Markdown')
        analytics_bot(flag=2)
        bot.register_next_step_handler(msg, totem_year)

    elif message.text == 'üóìÔ∏è –ü–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è':
        # chat_id = message.chat.id
        inline_db = types.InlineKeyboardMarkup(row_width=True)
        inline_db.add(types.InlineKeyboardButton('10 –¥–µ–∫–∞–±—Ä—è - 09 —è–Ω–≤–∞—Ä—è', callback_data='bd1'),
                      types.InlineKeyboardButton('10 —è–Ω–≤–∞—Ä—è - 09 —Ñ–µ–≤—Ä–∞–ª—è', callback_data='bd2'),
                      types.InlineKeyboardButton('10 —Ñ–µ–≤—Ä–∞–ª—è - 09 –º–∞—Ä—Ç–∞', callback_data='bd3'),
                      types.InlineKeyboardButton('10 –º–∞—Ä—Ç–∞ - 09 –∞–ø—Ä–µ–ª—è', callback_data='bd4'),
                      types.InlineKeyboardButton('10 –∞–ø—Ä–µ–ª—è - 09 –º–∞—è', callback_data='bd5'),
                      types.InlineKeyboardButton('10 –º–∞—è - 09 –∏—é–Ω—è', callback_data='bd6'),
                      types.InlineKeyboardButton('10 –∏—é–Ω—è - 09 –∏—é–ª—è', callback_data='bd7'),
                      types.InlineKeyboardButton('10 –∏—é–ª—è - 09 –∞–≤–≥—É—Å—Ç–∞', callback_data='bd8'),
                      types.InlineKeyboardButton('10 –∞–≤–≥—É—Å—Ç–∞ - 09 —Å–µ–Ω—Ç—è–±—Ä—è', callback_data='bd9'),
                      types.InlineKeyboardButton('10 —Å–µ–Ω—Ç—è–±—Ä—è - 09 –æ–∫—Ç—è–±—Ä—è', callback_data='bd10'),
                      types.InlineKeyboardButton('10 –æ–∫—Ç—è–±—Ä—è - 09 –Ω–æ—è–±—Ä—è', callback_data='bd11'),
                      types.InlineKeyboardButton('10 –Ω–æ—è–±—Ä—è - 09 –¥–µ–∫–∞–±—Ä—è', callback_data='bd12'))
        question_text = f"ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è."
        bot.send_message(chat_id, question_text, reply_markup=inline_db)
        analytics_bot(flag=1)

    elif message.text == '–ü—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–í–æ–∑—å–º–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–¥ –æ–ø–µ–∫—É¬ª':
        analytics_bot(flag=3)
        inline_markup = types.InlineKeyboardMarkup(row_width=True)
        inline_prog = types.InlineKeyboardButton('‚ñ∂Ô∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ', url='https://moscowzoo.ru/my-zoo/become-a-guardian')
        inline_site = types.InlineKeyboardButton('‚ñ∂Ô∏è –ù–∞—à —Å–∞–π—Ç', url='https://moscowzoo.ru')
        inline_vk = types.InlineKeyboardButton('‚ñ∂Ô∏è –ú—ã –≤ Telegram', url='https://t.me/Moscowzoo_official')
        inline_tg = types.InlineKeyboardButton('‚ñ∂Ô∏è –ú—ã –≤ VK', url='https://vk.com/moscow_zoo')
        inline_feedback = types.InlineKeyboardButton('‚úçÔ∏è –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤', callback_data='feedback')
        inline_markup.add(inline_prog, inline_site, inline_tg, inline_vk, inline_feedback)
        bot.send_message(message.chat.id, f'{about_prog}', parse_mode='Markdown', reply_markup=inline_markup)

    elif message.text == 'stop' or message.text =='Stop' or message.text == '—Å—Ç–æ–ø' or message.text =='–°—Ç–æ–ø':
        bot.send_message(message.chat.id, '‚òùÔ∏è –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop')

    elif message.text == 'stat':
        text = f"üí° –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\nüñ•Ô∏è *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\
- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n-–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π, —Å—Ä–µ–¥–Ω–∏–π, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\
- —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã–∑—ã–≤–∞–ª—Å—è –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é.—Ç–≤—ã–∑–æ–≤–æ–≤ –º–µ–Ω—é –±–æ—Ç–∞ –ø–æ –¥–∞—Ç–∞–º.\n\n\
üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.\n –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–≥–≥–≥–≥-–º–º-–¥–¥). *–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-04-10*"

        msg = bot.send_message(chat_id, text, parse_mode='Markdown')
        bot.register_next_step_handler(msg, generating_statistics)

    else:
        bot.send_message(message.chat.id, '–ú–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å! ü§∑‚Äç‚ôÄÔ∏è', parse_mode='Markdown')
        check = 1
        start(message)
        
def totem_year(message):
    global check
    check = 1
    flag = 0
    chat_id = message.chat.id

    if message.text.isdigit():
        result_temp = int(message.text)

        if abs(result_temp) < 1906:
            now_year = str(datetime.datetime.now())[:4]
            text = f'üòú –í—ã –º—Å—Ç–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É –∑–∞ –ø–µ–Ω—Å–∏–æ–Ω–Ω—É—é —Ä–µ—Ñ–æ—Ä–º—É –∏–ª–∏ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ {int(now_year)-result_temp}?'
            bot.send_message(chat_id, text)

        else:
            while flag == 0:
                for key in dict_zoroastri.keys():
                    if result_temp == int(key):
                        with open(f'animals/{dict_zoroastri[key][1]}', 'rb') as photo:
                            bot.send_photo(chat_id, photo, caption=f"{dict_zoroastri[key][0]}",
                                           parse_mode="Markdown")
                        flag = 1
                        choice_database(chat_id, 2, int(message.text), message=message)
                        break
                result_temp -= 32
    else:
        text = f'–í–æ–∑–º–æ–∂–Ω–æ, –≤ –∫–∞–∫–æ–º-—Ç–æ –ª–µ—Ç–æ–∏—Å—á–∏—Å–ª–µ–Ω–∏–∏ —ç—Ç–æ –∏ —è–≤–ª—è–µ—Ç—Å—è –≥–æ–¥–æ–º, –Ω–æ —Ç–æ–ª—å–∫–æ –Ω–µ –≤ –∑–µ–º–Ω–æ–º.\n\n –ù–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏. üî¢'
        bot.send_message(chat_id, text)

    start(message)


def already_passed(chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –±–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.
        –ï—Å–ª–∏ '–î–ê', –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—à–ª—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ '–î–ê / –ù–ï–¢'
        –ï—Å–ª–∏ '–ù–ï–¢' –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.  """
    if result_quiz != 0:
        for i in quize_result.keys():
            if quize_result[i][0][0] <= result_quiz <= quize_result[i][0][1]:
                menu_quiz = types.InlineKeyboardMarkup(row_width=2)
                button_yes = types.InlineKeyboardButton('‚úÖ –î–∞', callback_data='yes')
                button_no = types.InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='no')
                menu_quiz.add(button_yes, button_no)
                text = f'–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! \n{quize_result[i][1]} \n\n üëâ *–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â–µ —Ä–∞–∑?*'
                bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=menu_quiz)
    else:
        user_data[chat_id] = {'current_question': 1, 'score': 0}  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ 0 –±–∞–ª–ª–æ–≤
        send_question(chat_id, user_data[chat_id]['current_question'])


def send_question(chat_id, question_number):
    """ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å (–ú–µ–Ω—é '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞')"""
    keyboard = types.InlineKeyboardMarkup(row_width=True)

    for item in dict_questions[question_number]:
        question_text = item
        for val in dict_questions[question_number][item]:
            keyboard.row(telebot.types.InlineKeyboardButton(val[0], callback_data=val[1]))

    question_text = f"–í–æ–ø—Ä–æ—Å {question_number}/{len(dict_questions)}. {question_text}"
    bot.send_message(chat_id, question_text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data in ['yes', 'no', 'bd1', 'bd2', 'bd3', 'bd4','bd5', 'bd6',
                                                            'bd7', 'bd8', 'bd9', 'bd10', 'bd11', 'bd12', 'in_VK',
                                                            'in_m', 'feedback', 'stat_menu'])
def callback_data(call):
    """ –ï—Å–ª–∏ user —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–º—É –ø—Ä–æ—â–ª—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
        —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â–µ —Ä–∞–∑"""
    chat_id = call.message.chat.id
    if call.message:
        if call.data == 'yes':
            user_data[chat_id] = {'current_question': 1, 'score': 0}  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ 0 –±–∞–ª–ª–æ–≤
            send_question(chat_id, user_data[chat_id]['current_question'])

        if call.data == 'no':
            global check
            check = 1
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá')

        if call.data == 'bd1':
            send_msg_date_of_birth(chat_id, '10 –¥–µ–∫–∞–±—Ä—è - 09 —è–Ω–≤–∞—Ä—è')
        if call.data == 'bd2':
            send_msg_date_of_birth(chat_id, '10 —è–Ω–≤–∞—Ä—è - 09 —Ñ–µ–≤—Ä–∞–ª—è')
        if call.data == 'bd3':
            send_msg_date_of_birth(chat_id, '10 —Ñ–µ–≤—Ä–∞–ª—è - 09 –º–∞—Ä—Ç–∞')
        if call.data == 'bd4':
            send_msg_date_of_birth(chat_id, '10 –º–∞—Ä—Ç–∞ - 09 –∞–ø—Ä–µ–ª—è')
        if call.data == 'bd5':
            send_msg_date_of_birth(chat_id, '10 –∞–ø—Ä–µ–ª—è - 09 –º–∞—è')
        if call.data == 'bd6':
            send_msg_date_of_birth(chat_id, '10 –º–∞—è - 09 –∏—é–Ω—è')
        if call.data == 'bd7':
            send_msg_date_of_birth(chat_id, '10 –∏—é–Ω—è - 09 –∏—é–ª—è')
        if call.data == 'bd8':
            send_msg_date_of_birth(chat_id, '10 –∏—é–ª—è - 09 –∞–≤–≥—É—Å—Ç–∞')
        if call.data == 'bd9':
            send_msg_date_of_birth(chat_id, '10 –∞–≤–≥—É—Å—Ç–∞ - 09 —Å–µ–Ω—Ç—è–±—Ä—è')
        if call.data == 'bd10':
            send_msg_date_of_birth(chat_id, '10 —Å–µ–Ω—Ç—è–±—Ä—è - 09 –æ–∫—Ç—è–±—Ä—è')
        if call.data == 'bd11':
            send_msg_date_of_birth(chat_id, '10 –æ–∫—Ç—è–±—Ä—è - 09 –Ω–æ—è–±—Ä—è')
        if call.data == 'bd12':
            send_msg_date_of_birth(chat_id, '10 –Ω–æ—è–±—Ä—è - 09 –¥–µ–∫–∞–±—Ä—è')

        if call.data == 'in_VK':
            send_vk_to_wall(photo_path, caption)

        if call.data == 'in_m':
            msg = bot.send_message(chat_id, 'üìß –í–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å')
            bot.register_next_step_handler(msg, send_email)

        if call.data == 'feedback':
            msg = bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤. –≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å. ü´∂')
            bot.register_next_step_handler(msg, send_feedback)


def send_msg_date_of_birth(chat_id: str, dict_key: str):
    chat_d = chat_id
    '''–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º. –ú–µ–Ω—é "–ü–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è'''
    inline_send = types.InlineKeyboardMarkup(row_width=True)
    inline_send.add(types.InlineKeyboardButton('üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ—á—Ç—É –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞', callback_data='in_m'),
                             types.InlineKeyboardButton('üíª –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –í–ö', callback_data='in_VK'))
    global photo_path, caption
    photo_path = f'animals/{dict_date_of_birth[dict_key][1]}'
    caption = f"üëâ {dict_date_of_birth[dict_key][0]}"

    # choice_database(chat_id, 3, 0, dict_key, message=chat_id)
    with open(photo_path, 'rb') as photo:
        bot.send_photo(chat_id, photo, caption=caption, parse_mode="Markdown", reply_markup=inline_send)


@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    global result_quiz
    chat_id = call.message.chat.id
    # user_id = call.message.from_user.id
    # print('user –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ', user_id)
    #
    # print('call ', call.message)
    user_info = user_data.get(chat_id, None)
    if user_info:
        current_question = user_info['current_question']
        user_info['score'] = user_info['score'] + int(call.data)  # –°—É–º–º–∏—Ä—É–µ–º –±–∞–ª–ª—ã

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        next_question = current_question + 1
        if next_question <= len(dict_questions):  # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
            user_data[chat_id] = {'current_question': next_question, 'score': user_info['score']}
            send_question(chat_id, next_question)
        else:
            # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            for i in quize_result.keys():
                if quize_result[i][0][0] < user_info['score'] < quize_result[i][0][1]:
                    with open(f'animals/{quize_result[i][2]}', 'rb') as photo:
                        bot.send_photo(chat_id, photo, caption=f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞‚ùó \n{quize_result[i][1]}", parse_mode="Markdown")

                # –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ID. –î–µ–ª–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

                result_quiz = int(''.join(map(str, {user_info['score']})))
                choice_database(chat_id, 1, message=call.message)

            # –ú–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
            if chat_id in user_data:
                del user_data[chat_id]


def generating_statistics(message):
    '''–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.
    –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è.'''
    now_year = int(datetime.now().strftime("%Y")) # —Ç–µ–∫—É—â–∏–π –≥–æ–¥
    connection = sqlite3.connect('analytics_data.db')
    cursor = connection.cursor()

    try:
        datetime.strptime(message.text, "%Y-%m-%d")
        cursor.execute('SELECT * FROM Data WHERE date = ?', (message.text,))
        quantity = cursor.fetchone()

        cursor.execute('SELECT * FROM Data WHERE date = ?', (message.text,))
        # –ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
        new_users = cursor.fetchone()[5]

        connection.commit()
        connection.close()

        if quantity:
            amount = quantity[1] + quantity[2] + quantity[3] + quantity[4]    #

            connection = sqlite3.connect('database.db')
            cursor = connection.cursor()
            cursor.execute('SELECT COUNT(*) FROM Users WHERE last_activity = ?', (message.text,))
            activ_user = cursor.fetchone()[0]

            # —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            cursor.execute('SELECT * FROM Users')
            select_all = cursor.fetchall()
            avg_all_user = avg_func(select_all)

            # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            max_all_user = max(now_year - year[4] for year in select_all if year[4] != 0)

            # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            min_all_user = min(now_year - year[4] for year in select_all if year[4] != 0)

            # —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
            cursor.execute('SELECT * FROM Users WHERE last_activity = ?', (message.text,))
            select_day = cursor.fetchall()
            avg_day_user = avg_func(select_day)

            # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è
            max_day_user = max(now_year - year[4] for year in select_day if year[4] != 0)

            # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è
            min_day_user = min(now_year - year[4] for year in select_day if year[4] != 0)

            text = f'üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {message.text}*\n\nüë®‚Äçüëß‚Äçüë¶Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - {activ_user}\n\
üèÉ‚Äç‚ôÇÔ∏è –ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ - {new_users}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚ÜóÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - {max_day_user}\n\
‚û°Ô∏è –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - {avg_day_user}\n‚ÜòÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - {min_day_user}\n\
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚ÜóÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - {max_all_user}\n‚û°Ô∏è –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - \
{avg_all_user}\n‚ÜòÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - {min_all_user}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\
üìö *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç–∏–π –º–µ–Ω—é:* \n"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞" - {quantity[1]}\n\"–ü–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è" - {quantity[2]}\n"–ü–æ –≥–æ–¥—É —Ä–æ–∂–¥–µ–Ω–∏—è" - \
{quantity[3]}\n\"–ü—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–í–æ–∑—å–º–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–¥ –æ–ø–µ–∫—É¬ª" - {quantity[4]}\n\n * –í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å - {amount}*'

            bot.send_message(message.chat.id, text, parse_mode='Markdown')


        else:
            bot.send_message(message.chat.id, f'‚ùó *–î–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç.*', parse_mode='Markdown')
    except ValueError:
        bot.send_message(message.chat.id, f'‚ùó *–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.*', parse_mode='Markdown')


def avg_func(avg_all_user):
    now_year = int(datetime.now().strftime("%Y"))
    t = sum(now_year - year[4] for year in avg_all_user if year[4] > 0)
    count = sum(1 for year in avg_all_user if year[4] != 0)
    avg = t / count
    return round(avg)


def analytics_bot(flag=0):
    '''–°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—É–Ω–∫—Ç–∞–º –º–µ–Ω—é
            flag = 0 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
            flag = 1 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞ "–ü–æ –¥–∞—Ç–µ"
            flag = 2 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞ "–ü–æ –≥–æ–¥—É"
            flag = 3 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é "–ü—Ä–æ–≥—Ä–∞–º–º–∞ "'''

    last_activity = datetime.now().strftime("%Y-%m-%d")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('analytics_data.db')
    cursor = connection.cursor()
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É Users
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Data (
        date TEXT PRIMARY KEY,
        quiz_quantity INTEGER,
        date_quantity INTEGER,
        year_quantity INTEGER,
        prog_quantity INTEGER,
        new_users INTEGER
        )
        ''')

    cursor.execute('SELECT * FROM Data')
    dates = cursor.fetchall()
    for date in dates: # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞.
        if last_activity == date[0]:
            quiz_st = date[1]
            date_st = date[2]
            year_st = date[3]
            prog_st = date[4]
            new_users = date[5]
            break
    else:
        quiz_st = 0
        date_st = 0
        year_st = 0
        new_users = 0
        cursor.execute('INSERT INTO Data (date, quiz_quantity, date_quantity, year_quantity, prog_quantity, new_users) VALUES (?, ?, ?, ?, ?, ?)',
                       (last_activity, 0, 0, 0, 0, 0))


    if flag == 0:  # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
        cursor.execute('UPDATE Data SET quiz_quantity = ?  WHERE date = ?',
                       (quiz_st + 1, last_activity))

    elif flag == 1:
        pass
        cursor.execute('UPDATE Data SET date_quantity = ?  WHERE date = ?',
                       (date_st + 1, last_activity))

    elif flag == 2:
        cursor.execute('UPDATE Data SET year_quantity = ?  WHERE date = ?',
                       (year_st+1, last_activity))

    elif flag == 3:
        cursor.execute('UPDATE Data SET prog_quantity = ?  WHERE date = ?',
                       (prog_st+1, last_activity))
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    connection.commit()
    connection.close()


# –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è user_id. –í —Å—Ç–∞—Ä—Ç–µ –µ–≥–æ –Ω–µ—Ç
def choice_database(user_id, val=0, result_year=0, result_date='', message=None):
    first_name = message.chat.first_name
    user_id = message.chat.id

    """ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è val 0 - –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ user –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                   val 1 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
                   val 2 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
                   val 3 - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    """
    global result_quiz
    last_activity = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('database.db')
    cursor = connection.cursor()
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É Users
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Users (
    id INTEGER PRIMARY KEY,
    last_activity TEXT NOT NULL,
    result_quiz INTEGER,
    result_date TEXT NOT NULL,
    result_year TEXT NOT NULL,
    first_name TEXT NOT NULL
    )
    ''')
    if val == 0: # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
        try:
            cursor.execute('SELECT result_quiz, id FROM Users WHERE id = ?', (user_id,))
            results = cursor.fetchone()
            result_quiz = results[0]
        except Exception as e:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É
            cursor.execute('INSERT INTO Users (id, last_activity, result_quiz, result_date, result_year, first_name) VALUES (?, ?, ?, ?, ?, ?)', (user_id, last_activity, 0, ' ', 0, first_name))
            result_quiz = 0
            add_amount_new_user()

    elif val == 1:
        cursor.execute('UPDATE Users SET result_quiz = ?, last_activity = ? WHERE id = ?',
                       (result_quiz, last_activity, user_id))


    elif val == 2:
        cursor.execute('UPDATE Users SET result_year = ?, last_activity = ? WHERE id = ?',
                        (result_year, last_activity, user_id))

    elif val ==3:
        cursor.execute('UPDATE Users SET result_date = ?, last_activity = ? WHERE id = ?',
                        (result_date, last_activity, user_id))
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    connection.commit()
    connection.close()


def add_amount_new_user():
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—á–µ—Ç—á–∏–∫—É –≤–Ω–æ–≤—å –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"""
    last_activ = datetime.now().strftime("%Y-%m-%d")
    connection = sqlite3.connect('analytics_data.db')
    cursor = connection.cursor()
    cursor.execute('SELECT * FROM Data WHERE date = ?', (last_activ,))
    new_users = cursor.fetchone()[5]
    cursor.execute('UPDATE Data SET new_users = ?  WHERE date = ?',
                   (new_users + 1, last_activ))
    connection.commit()
    connection.close()


def send_feedback(message):
    user_id = message.from_user.id
    '''–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –≤ —Ñ–∞–π–ª feedback.txt –≤ —Ñ–æ—Ä–º–∞—Ç–µ <user_id>, <feedback>'''
    global check
    with open('feedback.txt', "a", encoding="utf-8") as file:
         feed = f'{user_id}, {message.text}\n'
         file.write(feed)
    check = 1
    start(message)

def send_email(message):
    ''' –§—É–≥–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ –Ω–∞ –ø–æ—á—Ç—É –∑–æ–æ–ø–∞—Ä–∫–∞.
    –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å –º–æ–µ–π –ø–æ—á—Ç–æ–π.
    –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. '''
    try:
        msg = EmailMessage()
        msg['Subject'] = f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è "–¢–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ" –æ—Ç {message.chat.first_name}' # —Ç–µ–º–∞ –ø–∏—Å—å–º–∞
        msg['From'] =from_email  # –æ—Ç –∫–æ–≥–æ
        msg['To'] = message.text  # –∫–æ–º—É
        msg.set_content(caption)

        with smtplib.SMTP('smtp.mail.ru', 587) as server:  # Specify your SMTP server
            server.starttls()
            server.login(from_email, passw_external_app)
            server.send_message(msg)

        bot.send_message(message.chat.id,'üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ—á—Ç—É –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞ zoofriends@moscowzoo.ru')
    except Exception as e:
        bot.send_message(message.chat.id,'‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')


def send_vk_to_wall(photo_path, caption):
    '''–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ –≤ –í–ö. –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –º–æ–µ–π —Å—Ç–µ–Ω–æ–π.'''
    vk_session = vk_api.VkApi(token=TOKEN_VK)
    caption += ('\n\n –ü–æ—Å—Ç –±—ã–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞.\
–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç –∏ —É–∑–Ω–∞–π—Ç–µ —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ https://t.me/MoskvaZooBot')
    vk = vk_session.get_api()
    upload = VkUpload(vk_session)
    photo = upload.photo_wall(photo_path, group_id=None)
    photo_id = f"photo{photo[0]['owner_id']}_{photo[0]['id']}"
    vk.wall.post(from_group=1, attachments=photo_id, message=caption)

bot.polling(non_stop=True)
