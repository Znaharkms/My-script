import datetime
import telebot
from telebot import types
import os
import vk_api
from vk_api import VkUpload
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.message import EmailMessage
from config import (dict_questions, dict_date_of_birth, TOKEN, TOKEN_VK, about_prog, intro_zoroastri,
                    quize_result, intro, dict_zoroastri, passw_external_app, from_email)


bot = telebot.TeleBot(TOKEN)
user_data = {}
check = 0  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
photo_path = ''
caption = ''

@bot.message_handler(commands=['start', 'help'])
def start(message: telebot.types.Message):
    chat_id = message.chat.id
    first_name = message.chat.first_name
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard = types.KeyboardButton(text='‚ùì–í–∏–∫—Ç–æ—Ä–∏–Ω–∞')
    keyboard1 = types.KeyboardButton(text='üóìÔ∏è –ü–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è')
    keyboard2 = types.KeyboardButton(text='üìí –ü–æ –≥–æ–¥—É —Ä–æ–∂–¥–µ–Ω–∏—è')
    keyboard3 = types.KeyboardButton(text='–ü—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–í–æ–∑—å–º–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–¥ –æ–ø–µ–∫—É¬ª')
    markup.add(keyboard)
    markup.add(keyboard1)
    markup.add(keyboard2)
    markup.add(keyboard3)

    path = f'{os.getcwd()}\logo.gif'
    file_logo = open(path, 'rb')
    if check == 0:
        alter_result_quize(chat_id, f"{chat_id}, {'---'}")  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º user –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã '---'
        bot.send_video(message.chat.id, file_logo, None, 'Text')
        text = (f'–ü—Ä–∏–≤–µ—Ç *{first_name}*! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç! \n\n{intro}')
    else:
        text = ('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá')
    bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=markup)

@bot.message_handler(commands=['stop'])
def stop(message): #–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /stop
    global check
    bot.send_message(message.chat.id,'–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
                     reply_markup=types.ReplyKeyboardRemove())
    check = 0


@bot.message_handler(content_types=['text'])
def quize(message: telebot.types.Message):
    chat_id = message.chat.id
    global check
    if message.text == '‚ùì–í–∏–∫—Ç–æ—Ä–∏–Ω–∞':
        already_passed(chat_id)

    elif message.text == 'üìí –ü–æ –≥–æ–¥—É —Ä–æ–∂–¥–µ–Ω–∏—è':
        mesg = bot.send_message(message.chat.id, f'{intro_zoroastri}\n\n–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è \n\n\
–ù–∞–ø—Ä–∏–º–µ—Ä: 1978', parse_mode='Markdown')
        bot.register_next_step_handler(mesg, totem_year)

    elif message.text == 'üóìÔ∏è –ü–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è':
        # chat_id = message.chat.id
        inline_db = types.InlineKeyboardMarkup(row_width=True)
        inline_db.add(types.InlineKeyboardButton('10 –¥–µ–∫–∞–±—Ä—è - 09 —è–Ω–≤–∞—Ä—è', callback_data='bd1'),
                      types.InlineKeyboardButton('10 —è–Ω–≤–∞—Ä—è - 09 —Ñ–µ–≤—Ä–∞–ª—è', callback_data='bd2'),
                      types.InlineKeyboardButton('10 —Ñ–µ–≤—Ä–∞–ª—è - 09 –º–∞—Ä—Ç–∞', callback_data='bd3'),
                      types.InlineKeyboardButton('10 –º–∞—Ä—Ç–∞ - 09 –∞–ø—Ä–µ–ª—è', callback_data='bd4'),
                      types.InlineKeyboardButton('10 –∞–ø—Ä–µ–ª—è - 09 –º–∞—è', callback_data='bd5'),
                      types.InlineKeyboardButton('10 –º–∞—è - 09 –∏—é–Ω—è', callback_data='bd6'),
                      types.InlineKeyboardButton('10 –∏—é–Ω—è - 09 –∏—é–ª—è', callback_data='bd7'),
                      types.InlineKeyboardButton('10 –∏—é–ª—è - 09 –∞–≤–≥—É—Å—Ç–∞', callback_data='bd8'),
                      types.InlineKeyboardButton('10 –∞–≤–≥—É—Å—Ç–∞ - 09 —Å–µ–Ω—Ç—è–±—Ä—è', callback_data='bd9'),
                      types.InlineKeyboardButton('10 —Å–µ–Ω—Ç—è–±—Ä—è - 09 –æ–∫—Ç—è–±—Ä—è', callback_data='bd10'),
                      types.InlineKeyboardButton('10 –æ–∫—Ç—è–±—Ä—è - 09 –Ω–æ—è–±—Ä—è', callback_data='bd11'),
                      types.InlineKeyboardButton('10 –Ω–æ—è–±—Ä—è - 09 –¥–µ–∫–∞–±—Ä—è', callback_data='bd12'))
        question_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è."
        bot.send_message(chat_id, question_text, reply_markup=inline_db)

    elif message.text == '–ü—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–í–æ–∑—å–º–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–¥ –æ–ø–µ–∫—É¬ª':
        inline_markup = types.InlineKeyboardMarkup(row_width=True)
        inline_prog = types.InlineKeyboardButton('‚ñ∂Ô∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ', url='https://moscowzoo.ru/my-zoo/become-a-guardian')
        inline_site = types.InlineKeyboardButton('‚ñ∂Ô∏è –ù–∞—à —Å–∞–π—Ç', url='https://moscowzoo.ru')
        inline_vk = types.InlineKeyboardButton('‚ñ∂Ô∏è –ú—ã –≤ Telegram', url='https://t.me/Moscowzoo_official')
        inline_tg = types.InlineKeyboardButton('‚ñ∂Ô∏è –ú—ã –≤ VK', url='https://vk.com/moscow_zoo')
        inline_feedback = types.InlineKeyboardButton('‚ñ∂Ô∏è –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ ', callback_data='feedback')
        inline_markup.add(inline_prog, inline_site, inline_tg, inline_vk, inline_feedback)
        bot.send_message(message.chat.id, f'{about_prog}', parse_mode='Markdown', reply_markup=inline_markup)

    elif message.text == 'stop' or message.text =='Stop' or message.text == '—Å—Ç–æ–ø' or message.text =='–°—Ç–æ–ø':
        bot.send_message(message.chat.id, '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop')

    else:
        bot.send_message(message.chat.id, '–ú–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å!', parse_mode='Markdown')
        check = 1
        start(message)
def totem_year(message):
    global check
    check = 1
    flag = 0
    chat_id = message.chat.id

    if message.text.isdigit():
        data = int(message.text)
        if abs(data) < 1906:
            now_year = str(datetime.datetime.now())[:4]
            text = f'–í—ã –º—Å—Ç–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É –∑–∞ –ø–µ–Ω—Å–∏–æ–Ω–Ω—É—é —Ä–µ—Ñ–æ—Ä–º—É –∏–ª–∏ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ {int(now_year)-data}?'
            bot.send_message(chat_id, text)

        else:
            while flag == 0:
                for key in dict_zoroastri.keys():
                    if data == int(key):
                        with open(f'animals/{dict_zoroastri[key][1]}', 'rb') as photo:
                            bot.send_photo(chat_id, photo, caption=f"{dict_zoroastri[key][0]}",
                                           parse_mode="Markdown")
                        flag = 1
                        break
                data -= 32
    else:
        text = f'–í–æ–∑–º–æ–∂–Ω–æ, –≤ –∫–∞–∫–æ–º-—Ç–æ –ª–µ—Ç–æ–∏—Å—á–∏—Å–ª–µ–Ω–∏–∏ —ç—Ç–æ –∏ —è–≤–ª—è–µ—Ç—Å—è –≥–æ–¥–æ–º, –Ω–æ —Ç–æ–ª—å–∫–æ –Ω–µ –≤ –∑–µ–º–Ω–æ–º.\n\n –ù–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏.'
        bot.send_message(chat_id, text)

    start(message)


def already_passed(chat_id: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –±–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.
        –ï—Å–ª–∏ '–î–ê', –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—à–ª—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ '–î–ê / –ù–ï–¢'
        –ï—Å–ª–∏ '–ù–ï–¢' –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.  """

    last_result = False
    with open('result_quize.txt', 'r', encoding="utf8") as file:
        for line in file:
            if line.startswith(str(chat_id)):
                last_result = line.split(',')[1]

    if last_result.isdigit():
         for i in quize_result.keys():
            if quize_result[i][0][0] <= int(last_result) <= quize_result[i][0][1]:
                menu_quiz = types.InlineKeyboardMarkup(row_width=2)
                button_yes = types.InlineKeyboardButton('–î–∞', callback_data='yes')
                button_no = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='no')
                menu_quiz.add(button_yes, button_no)
                text = f'–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! \n{quize_result[i][1]} \n\n *–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â–µ —Ä–∞–∑?*'
                bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=menu_quiz)
    else:
        user_data[chat_id] = {'current_question': 1, 'score': 0}  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ 0 –±–∞–ª–ª–æ–≤
        send_question(chat_id, user_data[chat_id]['current_question'])


def send_question(chat_id, question_number):
    """ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å (–ú–µ–Ω—é '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞')"""
    keyboard = types.InlineKeyboardMarkup(row_width=True)

    for item in dict_questions[question_number]:
        question_text = item
        for val in dict_questions[question_number][item]:
            keyboard.row(telebot.types.InlineKeyboardButton(val[0], callback_data=val[1]))

    question_text = f"–í–æ–ø—Ä–æ—Å {question_number}/{len(dict_questions)}. {question_text}"
    bot.send_message(chat_id, question_text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data in ['yes', 'no', 'bd1', 'bd2', 'bd3', 'bd4','bd5', 'bd6',
                                                            'bd7', 'bd8', 'bd9', 'bd10', 'bd11', 'bd12', 'in_VK', 'in_m', 'feedback'])
def callback_data(call):
    """ –ï—Å–ª–∏ user —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–º—É –ø—Ä–æ—â–ª—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
        —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â–µ —Ä–∞–∑"""
    chat_id = call.message.chat.id
    if call.message:
        if call.data == 'yes':
            user_data[chat_id] = {'current_question': 1, 'score': 0}  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ 0 –±–∞–ª–ª–æ–≤
            send_question(chat_id, user_data[chat_id]['current_question'])

        if call.data == 'no':
            global check
            check = 1
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá')

        if call.data == 'bd1':
            send_msg_date_of_birth(chat_id, '10 –¥–µ–∫–∞–±—Ä—è - 09 —è–Ω–≤–∞—Ä—è')
        if call.data == 'bd2':
            send_msg_date_of_birth(chat_id, '10 —è–Ω–≤–∞—Ä—è - 09 —Ñ–µ–≤—Ä–∞–ª—è')
        if call.data == 'bd3':
            send_msg_date_of_birth(chat_id, '10 —Ñ–µ–≤—Ä–∞–ª—è - 09 –º–∞—Ä—Ç–∞')
        if call.data == 'bd4':
            send_msg_date_of_birth(chat_id, '10 –º–∞—Ä—Ç–∞ - 09 –∞–ø—Ä–µ–ª—è')
        if call.data == 'bd5':
            send_msg_date_of_birth(chat_id, '10 –∞–ø—Ä–µ–ª—è - 09 –º–∞—è')
        if call.data == 'bd6':
            send_msg_date_of_birth(chat_id, '10 –º–∞—è - 09 –∏—é–Ω—è')
        if call.data == 'bd7':
            send_msg_date_of_birth(chat_id, '10 –∏—é–Ω—è - 09 –∏—é–ª—è')
        if call.data == 'bd8':
            send_msg_date_of_birth(chat_id, '10 –∏—é–ª—è - 09 –∞–≤–≥—É—Å—Ç–∞')
        if call.data == 'bd9':
            send_msg_date_of_birth(chat_id, '10 –∞–≤–≥—É—Å—Ç–∞ - 09 —Å–µ–Ω—Ç—è–±—Ä—è')
        if call.data == 'bd10':
            send_msg_date_of_birth(chat_id, '10 —Å–µ–Ω—Ç—è–±—Ä—è - 09 –æ–∫—Ç—è–±—Ä—è')
        if call.data == 'bd11':
            send_msg_date_of_birth(chat_id, '10 –æ–∫—Ç—è–±—Ä—è - 09 –Ω–æ—è–±—Ä—è')
        if call.data == 'bd12':
            send_msg_date_of_birth(chat_id, '10 –Ω–æ—è–±—Ä—è - 09 –¥–µ–∫–∞–±—Ä—è')

        if call.data == 'in_VK':
            send_vk_to_wall(photo_path, caption)

        if call.data == 'in_m':
            mesg = bot.send_message(chat_id, '–í–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å')
            bot.register_next_step_handler(mesg, send_email)

        if call.data == 'feedback':
            mesg = bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤. –≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å. ü´∂')
            bot.register_next_step_handler(mesg, send_feedback)




def send_msg_date_of_birth(chat_id: str, dict_key: str):
    '''–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º. –ú–µ–Ω—é "–ü–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è'''
    inline_send = types.InlineKeyboardMarkup(row_width=True)
    inline_send.add(types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ—á—Ç—É –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞', callback_data='in_m'),
                             types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –í–ö', callback_data='in_VK'))
    global photo_path, caption
    photo_path = f'animals/{dict_date_of_birth[dict_key][1]}'
    caption = f"{dict_date_of_birth[dict_key][0]}"
    chat_id = chat_id
    with open(photo_path, 'rb') as photo:
        bot.send_photo(chat_id, photo, caption=caption, parse_mode="Markdown", reply_markup=inline_send)


@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    chat_id = call.message.chat.id
    user_info = user_data.get(chat_id, None)
    if user_info:
        current_question = user_info['current_question']
        user_info['score'] = user_info['score'] + int(call.data)  # –°—É–º–º–∏—Ä—É–µ–º –±–∞–ª–ª—ã

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        next_question = current_question + 1
        if next_question <= len(dict_questions):  # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
            user_data[chat_id] = {'current_question': next_question, 'score': user_info['score']}
            send_question(chat_id, next_question)
        else:
            # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            for i in quize_result.keys():
                if quize_result[i][0][0] < user_info['score'] < quize_result[i][0][1]:

                    with open(f'animals/{quize_result[i][2]}', 'rb') as photo:
                        bot.send_photo(chat_id, photo, caption=f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! \n{quize_result[i][1]}", parse_mode="Markdown")

                # –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ID. –î–µ–ª–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
                alter_result_quize(chat_id, f"{chat_id},{user_info['score']}")

            # –ú–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
            if chat_id in user_data:
                del user_data[chat_id]


def alter_result_quize(old_str: str, new_str: str, file='result_quize.txt'):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —é–∑–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ï—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞,
       –µ—Å–ª–∏ –µ—Å—Ç—å, –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    check = 0
    with open(file, "r", encoding="utf-8") as f1, open("%s.bak" % file, "w", encoding="utf-8") as f2:
        for line in f1:
            if line.startswith(str(old_str)):
                line = line.replace(line, new_str)
                check = 1
            f2.write(line)

        if check == 0:
            f2.write('\n')
            f2.write(new_str)

    os.remove(file)
    os.rename("%s.bak" % file, file)


def send_feedback(message):
    global check
    with open('feedback.txt', "a", encoding="utf-8") as file:
         feed = f'{message.chat.id}, {message.text}\n'
         file.write(feed)
    check = 1
    start(message)

def send_email(message):
    try:
        msg = EmailMessage()
        msg['Subject'] = f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è "–¢–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ" –æ—Ç {message.chat.first_name}' # —Ç–µ–º–∞ –ø–∏—Å—å–º–∞
        msg['From'] =from_email  # –æ—Ç –∫–æ–≥–æ
        msg['To'] = message.text  # –∫–æ–º—É
        msg.set_content(caption)

        with smtplib.SMTP('smtp.mail.ru', 587) as server:  # Specify your SMTP server
            server.starttls()
            server.login(from_email, passw_external_app)
            server.send_message(msg)

        bot.send_message(message.chat.id,'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ—á—Ç—É –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞ zoofriends@moscowzoo.ru')
    except Exception as e:
        bot.send_message(message.chat.id,'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')


def send_vk_to_wall(photo_path, caption):
    '''–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ –≤ –í–ö. –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –º–æ–µ–π —Å—Ç–µ–Ω–æ–π.'''
    vk_session = vk_api.VkApi(token=TOKEN_VK)
    caption += ('\n\n –ü–æ—Å—Ç –±—ã–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞.\
–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç –∏ —É–∑–Ω–∞–π—Ç–µ —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ https://t.me/MoskvaZooBot')
    vk = vk_session.get_api()
    upload = VkUpload(vk_session)
    photo = upload.photo_wall(photo_path, group_id=None)
    photo_id = f"photo{photo[0]['owner_id']}_{photo[0]['id']}"
    vk.wall.post(from_group=1, attachments=photo_id, message=caption)

bot.polling(non_stop=True)
