# Есть список a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89].
# Выведите все элементы, которые меньше 5.
#
# a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
# b = [int(i) for i in a if i <=5]
# print(b)

# a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
# b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
# c = []
# for i in a:
#     if i in b and i in a:
#         c.append(i)
# print(c)


# a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
# b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
# result = [elem for elem in b if elem in a]
# print(result)


# Отсортируйте словарь по значению в порядке возрастания и убывания.
#
# dict = {'a':6, 'c':3, 'd':4, 'b':2, 'e':5}
# res = sorted(dict.values(), reverse=True)
# print(res)

# dict = {'a':6, 'c':3, 'd':4, 'b':2, 'e':5}
# dict2 = {'z':11, 'x':18, 'c':13, 'v':15, 'n':16}
# dict3 = {**dict, **dict2}
# print(dict3)

# my_dict = {'a':500, 'b':5874, 'c': 560,'d':400, 'e':5874, 'f': 20}
# dict2 = sorted(my_dict, key=my_dict.get, reverse=True)[:3]
# print(dict2)

# a = []
# for i in range(1,11):
#     a.append(i)
# for i in range(1,11):
#     print(sorted(a, reverse=True)[-i:])



# # Нужно вывести первые n строк треугольника Паскаля.
# # В этом треугольнике на вершине и по бокам стоят единицы,
# # а каждое число внутри равно сумме двух расположенных над ним чисел.
#
# N = 7
# P = []
#
# for i in range(0, N):
#     row = [1] * (i + 1)
#     for j in range(i + 1):
#         if j != 0 and j != i:
#             row[j] = P[i - 1][j - 1] + P[i - 1][j]
#
#     P.append(row)
# for r in P:
#     print(r)

# Палиндром
# a = 'Коту скоро сорок суток'
# a2 = a.lower().replace(' ','')
# if a.lower().replace(' ','') == a2[::-1]:
#     print ('Палидром')
#
# print(a2)

# Сделайте так, чтобы число секунд отображалось в виде дни:часы:минуты:секунды.

# dig = 2156563
# strok = str(dig // 86400) + ' дн:'
# strok += str((dig % 86400) // 3600) + ' ч: '
# strok += str(((dig % 86400) % 3600) // 60) + ' м: '
# strok += str(((dig % 86400) % 3600) % 60) + ' с: '
# print(strok)
# day = dig // (24 * 3600)
# dig %= 24 * 3600
# hours = dig // 3600
# dig %= 3600
# min = dig // 60
# print(f'{day} дн: {hours} ч: {min} м: {dig % 60} c')


#
# Вы принимаете от пользователя последовательность чисел,
# разделённых запятой. Составьте список и кортеж с этими числами.
#
# a = '1, 2, 3, 4, 5, 6, 7'
# a = a.replace(' ', '').replace(',', '')
# spisok = list(a)
# print(spisok)
# tupl = tuple(spisok)
# print(tupl)

# Выведите первый и последний элемент списка.
#
# a = ['1', '2', '3', '4', '5', '6', '7']
# print(f'Первый элемент {a[0]}, последний элемент {a[-1]}')


# апишите программу, которая принимает имя файла и выводит его расширение.
# Если расширение у файла определить невозможно, выбросите исключение.
# def get_extension(file):
#     filename = file.split('.')
#     if len(filename) < 2: raise ValueError('Это не название файла')
#     first, *middle, last = filename
#     d = not first
#     d2 = not middle
#     d3 = not last
#     if not first or not middle and not last: raise ValueError('Это не название файла')
#     return filename[-1]

# print(get_extension('.abc.def.'))   # raises ValueError
# print(get_extension('abc.py'))
# print(get_extension('abc'))  # raises ValueError
# print(get_extension('.abc'))   # raises ValueError


# def suma(n):
#    resul = 0
#    for i in range(1,4):
#       resul += int(str(n) * i)
#    print(resul)
#
# suma(5)

# Напишите программу, которая выводит чётные числа
# из заданного списка и останавливается, если встречает число 237.

# numbers = [
#     386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345,
#     399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217,
# ]
# for i in numbers:
#    if int(i) == 237: break
#    elif int(i) % 2 == 0: print(i)

# Задача 15
# Напишите программу, которая принимает два списка
# и выводит все элементы первого, которых нет во втором.

# a = [1, 3, 7, 9, 0, 11, 46, 23]
# b = [1, 7, 0, 11, 15, 65, 23, 63, 79, 4, 8]
# for i in a:
#    if i not in b: print(i)


# set_1 = set(['White', 'Black', 'Red'])
# set_2 = set(['Red', 'Green'])
#
# print(set_1 - set_2)


# Задача 17
# Сложите цифры целого числа.

# a = 123
# res = 0
# # for i in str(a):
# #    res += int(i)
# # print(res)
#
# res = [int(i) for i in str(a)]
# print(sum(res))


# Задача 18
# Посчитайте, сколько раз символ встречается в строке.
# a = 'Посчитайте, сколько раз символ встречается в строке.'
# b = 'р'
# print(a.count(b))

# Задача 19
# Поменяйте значения переменных местами

# import random
# a = 456
# a1 = len(str(a))
# list_b = random.sample(str(a), k=a1)
# print(int(''.join(list_b)))

# Задача 21
# Нужно проверить, все ли числа в последовательности уникальны.

# a = 1234562345
# list_a = {}
# for i in str(a):
#     if i in list_a:
#         list_a[i] +=1
#     else: list_a[i] = 1
# print(list_a)
#
# for key, val in list_a.items():
#     if val ==1:
#         print(f'Символ {key} является уникальным')

# from collections import Counter
#
#
# text = ''' Я не мещанин, как с гордостью говорил Пушкин, и смело говорю,
# что я аристократ, и по рождению, и по привычкам, и по положению. Я аристократ потому,
# что вспоминать предков – отцов, дедов, прадедов моих, мне не только не совестно,
# но особенно радостно. Я аристократ потому, что воспитан с детства в любви и уважении
# к изящному, выражающемуся не только в Гомере, Бахе и Рафаэле, но и всех мелочах жизни:
# в любви к чистым рукам, к красивому платью, изящному столу и экипажу. Я аристократ потому,
# что был так счастлив, что ни я, ни отец мой, ни дед мой не знали нужды и борьбы между
# совестью и нуждою, не имели необходимости никому никогда ни завидовать, ни кланяться,
# не знали потребности образовываться для денег и для положения в свете и тому подобных
# испытаний, которым подвергаются люди в нужде. Я вижу, что это большое счастье и благодарю
# за него Бога, но ежели счастье это не принадлежит всем, то из этого я не вижу причины
# отрекаться от него и не пользоваться им. '''
#
# words = text.split()
#
# res = Counter(words)
# t=res
# key2 = max(res, key = lambda k: res[k])
#
# for key in range(2):
#     print(res[key])
#
# print(res[key2], key2)
# print(key2)

# Задача Ход ладьи
# a1 = 2
# a2 = 4
# b1 = 5
# b2 = 1
# x = abs(a1-b1)
# c = abs(a2-b2)
## print('Может') if abs(a1-b1) == abs(a2-b2) else print('Не может')

# Задача Ход короля
# a1 = 3
# a2 = 5
# b1 = 3
# b2 = 3
# x = abs(a1-b1)
# c = abs(a2-b2)
#
# print('Может') if abs(a1-b1) == abs(a2-b2) and abs(a1-b1) == 1 or abs(a2-b2) == 1 or a1 == b1 and abs(a1-b1) == 1 or a2 == b2 and abs(a1-b1) == 1 else print('Не может')


# Задача: Пересечение отрезков
# На числовой прямой даны два отрезка: [a1; b1] и [a2; b2].
# Напишите программу, которая находит их пересечение.
# Пересечением двух отрезков может быть: отрезок; точка; пустое множество.

# a1 = 1
# a2 = 7
# b1 = 7
# b2 = 10
#
# if a2 == b1 or a1 == b2: print(f'Пересечение прямых, является точка')
# elif b2 > a2 > b1: print(f'Пересечение прямых, является отрезок от {b1} до {a2}')
# elif a1 < b1 and a2 > b2: print(f'Пересечение прямых, является отрезок от {b1} до {b2}')
# else: print('Пересечений нет')


# 1. Создать произвольный словарь
# 2. Добавить новый элемент с ключом типа str и значением типа int
# 3. Добавить новый элемент с ключом типа кортеж(tuple) и значением типа список(list)
# 4. Получить элемент по ключу
# 5. Удалить элемент по ключу
# 6. Получить список ключей словаря
#
# my_dict = {'a':1, 'b':2, 'c':3}
# my_tuple = ('a', 'c', 'e')
# my_list = [1, 2, 3]
# my_dict['d'] = 5
# my_dict[my_tuple] = my_list
# print('Словарь', my_dict)
# print('***************')
# for key in my_dict:
#     print('Элемент по ключу', my_dict[key])
# print('***************')
# print('Кортеж', my_dict[my_tuple])
# del my_dict['c']
# print('***************')
# print('Удаление ключа',my_dict)
# print('***************')
# print('Ключи',my_dict.keys())



# hobbies1 = 'кино книги велосипед хоккей кулинария цветы кошки'.split()
# hobbies2 = 'кошки кино путешествия футбол кулинария автомобили дайвинг'.split()
# result = len(set(hobbies1) & set(hobbies2)) / float(len(set(hobbies1) | set(hobbies2))) * 100
# print(f'Совпадение интересов: {result:.2f}%')

# stri = 'широкая электрификация южных губерний даст мощный толчок подъёму сельского хозяйства'
#
# result = {i.lower() for i in stri if i.isalpha()}
# print('Да' if len(result) == 33 else 'Нет')

# программа код компьютер монитор интерпретатор
# n = int(input())
# print('Количество уникальных символов во всех словах:', len(set(''.join([input().lower() for _ in range(n)]))))

# book1 = 'Мастер и Маргарита, Война и мир, Тихий Дон'
# book2 = 'Джейн Эйр, Террор, Война и мир, Мастер и Маргарита, Ноc'
# z = len(set(book1.split(', ')))
# x = set(book1.split(', '))
#
# print(z)
# print(x)
# print(len(set(book1.split(', ')) & set(book2.split(', '))))


# a = 5678
# b = 34215
# print('ДА' if set(str(a)) & set(str(b)) else 'Нет')

# Задача 1.6
# 1. Создать множество(set)
# 2. Создать неизменяемое множество(frozenset)
# 3. Выполнить операцию объединения созданных множеств
# 4. Выполнить операцию пересечения созданных множеств

# set_a = {1, 2, 3, 4, 5, 6, 'a', 'b', 'c'}
# # set_b = frozenset({1, 2, 3, 4, 'a', 'b', 'd'})
# set_b = [1, 2, 3, 5, 'f', 'g']
# set_c = set_a.union (set_b)
# set_d = set_a.difference_update()
#
#
# print('A: ', set_a)
# print('B: ', set_b)
# print('C: ', set_c)
# print('D: ', set_d)



# Задача 2.1
# def calc(a, b, operation):
#     # Задаем дефолтное значение возвращаемого результата
#     result = 'Операция не поддерживается'
#
#     if operation == '+':
#         result = a + b
#     elif operation == '-':
#         result = a - b
#     elif operation == '*':
#         result = a * b
#     elif operation == '/':
#         # Проверка деления на ноль
#         if b is not 0:
#             result = a / b
#         else:
#             result = 'Деление на 0!'
#
#     # Возвращаем результат выполнения функции
#     return result
#
#
# if __name__ == '__main__':
#     # Проверяем корректные значения
#     print(calc(30, 15, '+'))
#     print(calc(30, 15, '-'))
#     print(calc(30, 15, '*'))
#     print(calc(30, 15, '/'))
#     # Проверяем проверку деления на ноль
#     print(calc(30, 0, '/'))
#     # Проверяем неподдерживаемую операцию
#     print(calc(30, 15, '%'))

# def season(n):
#     for key, val in season_dict.items():
#         g = key
#         f = val
#         if n in key: return val
#
#
#
# season_dict = {(12, 1, 2): 'Зима',
#                (3, 4, 5): 'Весна',
#                (6, 7, 8): 'Лето',
#                (9, 10, 11): 'Осень'}
#
# n = int(input('Номер месяца'))
# print(season(n))

# Задача 3.1

# Дана следующая строка: ‘Сидел барсук в своей норе и ел картошечку пюре’
#
# 1. Создайте данную строку
# 2. Получите ее длину
# 3. Проведите операцию сложения со строкой ‘.’
# 4. Проверьте, входит ли подстрока ‘ре’ в заданную строку
# 5. Посчитайте количество вхождений подстроки ‘ре’
# 6. Получите предпоследний символ строки
# 7. Получите все символы с нечетными индексами
# 8. Определите, сколько слов в строке

# strok = 'Сидел барсук в своей норе и ел картошечку пюре'
# print('Длина строки: ', len(strok))
# print('Соединение: ', strok + '.')
# lict_count = strok.count('ре')
# print('Подстрока "ре" входит с строку: ', lict_count)
# print('Предпоследний символ: ', list(strok)[-1])
# for i in range(1, len(strok), 2):
#     print('Символы с нечетным индексом: ', strok[i])
# strok.split(' ')
# print('Количнство слов: ', len(strok.split())) #my_str.count(' ') + 1


# Дана строка: ‘пишите код так, как будто сопровождать его будет склонный к насилию психопат, который знает, где вы живете.’
#
# 1. Начните строку с заглавной буквы, если она находится в нижнем регистре.
# 2. Найдите индекс вхождения подстроки ‘сопровождать’.
# 3. Замените вхождение подстроки ‘сопровождать’ на ‘поддерживать’.
# 4. Разбейте предложение на части по запятым. Соедините части обратно, снова добавив запятые между частями.

# my_str = 'пишите код так, как будто сопровождать его будет склонный к насилию психопат, который знает, где вы живете.'
#
# print(my_str.capitalize())
# print('2. Индекс вхождения: ', my_str.find('сопровождать'))
#
# my_str2 = my_str.replace('сопровождать', 'поддерживать')
# print('3. Замена: ', my_str2)
# my_str3 = my_str.split(',')
# print('4.1. Разбил по частям : ', my_str3)
# my_str4 = ','.join(my_str3)
# print('4.2. Соеденить по частям : ', my_str4)


# import re
# import string
# string = 'This is a string, with words!&%$#@/\?=+-*/'
# print(list(filter(lambda w: len(w) > 0, re.split('\W+', string))))

# Задача 3.3
# Дано имя файла. Необходимо вывести его расширение.
# name_file = 'name.doc'
# print(name_file.split('.')[-1])
# name_file = 'folder1/folder2/file.ext'
# x = name_file.find('.')
# print(name_file[x+1:]) #  - срезы

# name_file_list = name_file.split('.')
# print(name_file_list[-1]) # - вывод последней подстроки

# print(name_file.partition('.')[2]) # - Метод partition, разбивает имя на части по '.'
# и выводим вторую подстроку


# Задача 3.4 # Сложите цифры целого числа.

# number = 12345
# res =0
# for i in str(number):
#     res += int(i)
# print('Сумма: ', res)
#
# lst = [int(i) for i in str(number)]
# print('Сумма: ', sum(lst))

# Задача 3.5 Замените заданное количество вхождений подстроки.

# str_my = '01010100011100101010'
# print(str_my.replace('1', 'x', 5))

# Задача 3.6 Выяснить, является ли строка палиндромом.
# palid = 'П1отенция - яиц нет, оп'
# palid2 = "".join(filter(str.isalpha, palid))
# if palid2.lower().strip() == palid2.lower()[::-1]:print('Палидром', palid)
# else: print('Не палидром', palid)


# Задача 3.7 Дана строка из двух слов. Поменяйте слова местами.

# my_str = 'как дела'
# my_str2 = my_str.split(' ')
# z = my_str2[0]
# my_str2[0], my_str2[1] = my_str2[1], my_str2[0]
# print(' '.join(my_str2))

# my_str = 'как дела привет'
# my_list = my_str.split(' ')
# my_list.reverse()
# print(' '.join(my_list))

