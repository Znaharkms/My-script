import telebot
from telebot import types
from config import keys, TOKEN
from extensions import CryptoConverter, ConvertionExeption

bot = telebot.TeleBot(TOKEN)
ch = 0
@bot.message_handler(commands=['start', 'help'])
def start(message: telebot.types.Message):
    chat_id = message.chat.id
    first_name = message.chat.first_name
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard = types.KeyboardButton(text='ü§ë –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç')
    keyboard2 = types.KeyboardButton(text='‚ùì –ü–æ–º–æ—â—å')
    markup.add(keyboard, keyboard2)
    if ch == 0:
        bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç {first_name} !")
        text = ('–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Å–ª—É–¥–µ—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: \n*<–∫–æ–¥ –≤–∞–ª—é—Ç—ã> \
<–≤ –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤–æ–π –≤–∞–ª—é—Ç—ã>* \n*–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: RUB USD 10* \
\n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç - –∫–Ω–æ–ø–∫–∞ *"–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç"*')
    else:
        text = ('–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å:')
    bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=markup)


@bot.message_handler(commands=['values'])
def values(message: telebot.types.Message):
    text = '*–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:*'
    for key, item in keys.items():
        text = '\n'.join((text, f'{item[1]} {key} - {item[0]}'))
    text += '\n------------------------------ \n*–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: RUB USD 10*'
    bot.send_message(message.chat.id, text, parse_mode="Markdown")


@bot.message_handler(content_types=['text'])
def converter(message: telebot.types.Message):
    global ch
    ch = 1

    if message.text == 'ü§ë –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç':
        values(message)
        return
    if message.text == '‚ùì –ü–æ–º–æ—â—å':
        text = ('–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Å–ª—É–¥–µ—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: \n*<–∫–æ–¥ –≤–∞–ª—é—Ç—ã> \
<–≤ –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤–æ–π –≤–∞–ª—é—Ç—ã>* \n*–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: RUB USD 10* \
\n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç - –∫–Ω–æ–ø–∫–∞ *"–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç"*')

        bot.send_message(message.chat.id, text, parse_mode="Markdown")
        return

    try:
        ask = message.text.upper().split(' ')
        if len(ask) != 3:
            raise ConvertionExeption('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç')

        quote, base, amoute = ask
        total = CryptoConverter.get_price(quote, base, amoute)

    except ConvertionExeption as e:
        bot.reply_to(message, f'–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n{e}')
        start(message)
    except Exception as e:
        bot.reply_to(message, f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É \n{e}')
        start(message)
    else:
        text = f'–ö—É—Ä—Å: {amoute} {keys[quote][1]}{quote} = {total * abs(float(amoute))} {keys[base][1]}{base}'
        bot.reply_to(message, text)
        start(message)


bot.polling(non_stop=True)
